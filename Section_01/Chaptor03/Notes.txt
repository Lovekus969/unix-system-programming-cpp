                                                              Chapter - 03     Starting a UNIX Session

This chapter focuses on the basic interaction between the user and the UNIX operating system, from logging in to logging out, and introduces essential commands for beginners.

1. Logging In and Logging Out
                To start a UNIX session, a user logs in by entering a valid username and password.
                Logging in allows access to the UNIX shell — the command-line interface where users can type commands.
                To end the session, users log out using the logout or exit command, which safely terminates their session.

2. Passwords and Security

                Passwords protect each user’s account from unauthorized access.
                Users are encouraged to create strong passwords and can change them using the passwd command.
                UNIX hides passwords for security reasons (not shown on screen while typing).

3. Command Line Format

                Commands in UNIX follow a specific format:
      For example:- >> 
                  command [options] [arguments]

4. Basic UNIX Commands

                ls – Lists files and directories
                pwd – Displays the current working directory
                cd – Changes the current directory
                mkdir – make a new directory
                rmdir – Removes a directory
                cat – Displays file contents
                date – Shows the current date and time

5. Correcting Typing Mistakes

                UNIX allows editing commands directly on the command line:
                Use Backspace to delete characters.
                Use Ctrl + U to erase the entire line and start over.

6. Establishing Contact with UNIX

            When a user logs in, the system starts a login shell, loads configuration files (like .profile or .bashrc), and prepares the environment for command execution.
            The shell interprets user commands, executes them, and displays results.

7. Internal UNIX Operations

            UNIX handles tasks through processes, input/output redirection, and file management internally.
            Each command runs as a separate process, and UNIX efficiently manages these processes in the background.

3.1: Establishing Contact with UNIX
              The process of establishing contact with the UNIX operating system involves a series of prompts and user inputs that mark the beginning and end of a session.

What is a UNIX Session?
              A session is the period of time during which a user interacts with the computer system after logging in and before logging out.
              During a session, the user can execute commands, create or modify files, and communicate with the system.


    Login Name
              When a user account is created in UNIX, both a login name (also known as User ID or Username) and a password are assigned.

Key Points:

              Your User ID is unique — it identifies you to the UNIX system and distinguishes you from all other users.
              It allows the system to manage your personal files, permissions, and access settings securely.
              The User ID and password together form your credentials for accessing the system.

Logging In Process:

When the UNIX system displays the login prompt, type your User ID and press [Return] (or Enter).

                                    login: david


The system then displays a password prompt:

                                    Password:


Type your password carefully — nothing will appear on the screen as you type (for security reasons).

If both the login name and password are correct, UNIX grants you access and displays the shell prompt (e.g., $ or %), indicating that you can now enter commands.


                                  login: david
                                  Password: ********
                                  $
                    Here,
                    
                    david → is the User ID.
                    ******** → represents the hidden password.
                    $ → indicates that the user is successfully logged in and the system is ready for commands.

Meaning of $ in UNI
                The $ symbol is called the shell prompt.
                It appears on the screen after you successfully log in to the UNIX system.

What It Means

                The $ prompt means the system is ready to accept your commands.
                It’s like UNIX’s way of saying:
                “I’m waiting — you can type your next command now.”



Different Prompts for Different Shells
              The symbol may vary depending on which shell you are using (a shell is the command interpreter in UNIX):

                  | Shell Type                    | Prompt Symbol | Example         |
                  | ----------------------------- | ------------- | --------------- |
                  | **Bourne Shell (sh)**         | `$`           | `$ ls`          |
                  | **Bash (Bourne Again Shell)** | `$`           | `$ pwd`         |
                  | **C Shell (csh)**             | `%`           | `% date`        |
                  | **Superuser (root)**          | `#`           | `# rm file.txt` |

Password
          A password in UNIX is a sequence of letters, digits, or special characters used to verify a user’s identity and ensure that only authorized individuals can access the system.

Key Points:
          
          The password acts as a security measure that protects your account and data from unauthorized use.
          Each user must have a valid login name (User ID) and password to access the system.
          Passwords are case-sensitive, meaning uppercase and lowercase letters are treated differently.

      login: david
      Password: ********
      Welcome to UNIX System
      $

      Here, the $ symbol means you have successfully logged in and the system is ready for your next command.

Incorrect Login or Password
        
                If you enter the wrong User ID or password, the UNIX system will not allow access to your account.
        
        What Happens:
                When the information you enter doesn’t match the stored user credentials, UNIX displays an error message, such as:
        
        Login incorrect
                After showing this message, the system once again displays the login prompt:
        
        login:
            This means the system is ready for you to try again by entering your User ID and password correctly.

Changing Your Password
        The passwd command in UNIX is used to change your current password or create one if you don’t already have a password.

Purpose:
        
        Helps maintain account security by allowing you to update your password regularly.
        
        Prevents unauthorized access by ensuring only you know your current password.

Steps to Change Your Password:
                  At the system prompt ($ or %), type:     passwd
                  and press [Return] (or Enter).
        
           UNIX will then ask for your current (old) password:
                Old password:
        
        
        Type your old password and press [Return].
        (Note: Nothing will appear on the screen as you type.)
        
        If the old password is correct, UNIX will prompt you to enter your new password:
                
                    New password:
        Type your new password and press [Return].
        UNIX will ask you to retype the new password to confirm:

                  Retype new password:

        If both entries match, the system displays a message like:

                  Password changed.

        and returns you to the command prompt:

        $ passwd
        Old password: ********
        New password: ********
        Retype new password: ********
        Password changed.
        $
3.2.2 Basic Command Line Structure

      In UNIX, every command line that you type at the system prompt follows a standard structure.
      Each command line is made up of three main fields:

      1. Command Name
                This is the name of the program or instruction you want UNIX to execute.
      
   For Example: =>   ls      Here, ls is the command used to list files in a directory.

      2. Options
            Options modify how a command behaves.
            They usually begin with a dash (-) or double dash (--) and can be combined.

     For Example:=> ls -l
      Here, -l is an option that tells ls to display files in long listing format (with details like permissions, owner, and file size)

      3. Arguments
              Arguments specify the object the command acts upon — such as a file, directory, or path.
          For Example:=>>   ls -l /home/david

                      ls → command
                      -l → option
                      /home/david → argument (the directory to list)

      General Command Line Format 
              command [options] [arguments]
      
      More Examples:
                  | Command                  | Description                          |
                  | ------------------------ | ------------------------------------ |
                  | `date`                   | Displays the current date and time   |
                  | `cat file.txt`           | Displays the contents of `file.txt`  |
                  | `rm -r foldername`       | Removes a directory and its contents |
                  | `cp file1.txt file2.txt` | Copies one file to another           |
      
      So, in short:
      
      ✅ A UNIX command line usually looks like this:
      Command → Option → Argument


3.2.3 Date and Time Display: The date Command

    The date command in UNIX is used to display the current date and time on the screen.
    Purpose:
          It shows the system’s current date and time.
            The system administrator sets and maintains this information — regular users cannot change it.
               
                          $ date
                      Mon Oct 14 10:32:05 EST 2025
  Explanation:

      Mon → Day of the week
      Oct 14 → Month and day
      10:32:05 → Current time (hour:minute: second)
      EST → Time zone
      2025 → Year

Additional Information:
      The date command simply displays the system’s time settings.
      Only users with administrator (root) privileges can change the system clock using:

                                Summary 
      | Command | Description                    | Example Output                 |
      | ------- | ------------------------------ | ------------------------------ |
      | `date`  | Displays current date and time | `Mon Oct 14 10:32:05 EST 2025` |


3.2.4 Information on Users: The who Command

        The who command in UNIX is used to display information about all users currently logged into the system.
        Purpose:
                  It lists the login names, terminal lines, and login times of users who are currently connected.
                  It helps monitor system activity and check who is using the system at a given time.

                        
                                                Summary 

                    | Command    | Description               | Example Output            |
                    | ---------- | ------------------------- | ------------------------- |
                    | `who`      | Lists all logged-in users | `david tty1 Oct 18 09:30` |
                    | `who am i` | Shows your own login info | `david tty1 Oct 18 09:30` |

3.5 Using Shells and Utilities

    The shell is a key component of the UNIX operating system. It acts as an interface between the user and the system’s internal functions.
    When you type a command, the shell interprets it, processes it, and then communicates with the UNIX kernel (the core of the system) to carry out the requested operation.
    
    The Shell
          The shell is a program that handles user interaction with UNIX.
    It allows you to:
            Enter commands.
            Run programs and utilities.
            Control processes and input/output redirection.
            Essentially, the shell translates user commands into actions that the operating system understands.
    
    How It Works:
        You type a command at the prompt (e.g., $ or %).
        The shell interprets the command.
        It then executes the command — either internally (if it’s built-in) or by locating an external utility program.
    
    
    Shell Commands:
          Some commands are built into the shell program itself.
          These are called shell built-in commands because they are recognized and executed directly by the shell without starting another program.
    
    Examples include:
              cd     # change directory
              echo   # display text on the screen
              pwd    # print working directory
              set    # display or set environment variables
    
    Utility Programs
            Most UNIX commands are actually external executable programs stored in system directories like /bin, /usr/bin, or /usr/local/bin.
            When you type such a command, the shell searches for the program file, loads it, and runs it.
    
      These are known as utilities.
        Examples of Utility Programs:
                        
                        ls     # list files in a directory
                        cat    # display file contents
                        date   # show current date and time
                        who    # display logged-in users
    
                          Summary Table 
    | Type                 | Description                               | Examples                   |
    | -------------------- | ----------------------------------------- | -------------------------- |
    | **Shell Commands**   | Built into the shell; executed internally | `cd`, `echo`, `pwd`        |
    | **Utility Programs** | External programs executed by the shell   | `ls`, `cat`, `date`, `who` |

3.5.1 Kinds of Shells
    
    UNIX provides several types of shells, each offering different features and capabilities.
    A shell is simply a command interpreter — the program that reads your commands and carries them out.
    
    1. Bourne Shell (sh)
            The Bourne Shell, abbreviated as sh, is the standard UNIX shell.
            It was one of the first shells developed for UNIX and is still widely used today.
            In most UNIX systems, the Bourne shell is the default shell for users.
    
    Features:   
            Performs basic command interpretation and scripting.
            Supports input/output redirection and simple control structures (like loops and conditionals).  
            Used widely in shell scripting for automation.

2. Korn Shell (ksh)
      
            The Korn Shell, abbreviated as ksh, is an enhanced version of the Bourne shell.
            It includes all the features of the Bourne shell (backward compatible) plus many additional capabilities.
      
    Features:
      
            Includes command-line editing, history recall, and job control (the ability to manage multiple processes).
            Provides programming enhancements, such as improved variable handling and arithmetic operations.
            You can run scripts written for the Bourne shell (sh) under the Korn shell without modification.



| Shell Type       | Abbreviation | Description                                         | Prompt Symbol |
| ---------------- | ------------ | --------------------------------------------------- | ------------- |
| **Bourne Shell** | `sh`         | Standard UNIX shell; default on most systems        | `$`           |
| **Korn Shell**   | `ksh`        | Enhanced version of Bourne shell with more features | `$`           |


3.5.2 Changing Your Shell

    When you log in to a UNIX system, your default shell is assigned by the system administrator (e.g., sh, ksh, bash, etc.).
    However, you can change your current shell temporarily by typing the name of another shell at the command line.
