
Cheack all shell commands on this website copy and paste the link to see.
https://explainshell.com/explain?cmd=ls#

                                                    Chapter Overview: Shell as a High-Level Language


This chapter focuses on the capabilities of the UNIX shell, showing that it is not just a command interpreter but also a powerful high-level programming language.
  It covers the following key topics:

Variables ‚Äì How to create, assign, and use variables in shell scripts to store data (like numbers, strings, filenames, etc.).

Flow Control ‚ÄìHow to control the flow of execution in shell scripts using constructs such as:

  if, else, elif (conditional branching)
  for, while, until loops

case statements (for multi-branch selection)
    Creation of Shell Scripts ‚Äì How to write and save a shell program (usually with a .sh extension) and make it executable.
    Running Shell Scripts ‚Äì How to execute shell programs from the command line using commands like:

      sh scriptname.sh
      ./scriptname.sh

Debugging ‚Äì
How to identify and fix errors in shell programs using options like:
    
    sh -x scriptname.sh (to trace execution)
    echo statements (to print variable values and track flow)


Shell as a Command Language

The UNIX shell is a command language that is interpreted, not compiled.
‚Üí This means commands are executed line by line by the shell, rather than being converted into machine code before running.

    Shell Program Files are called:

                                  Shell procedures
                                  Shell scripts
                                  Or simply scripts

A shell script is a file containing a series of shell commands that the shell executes in sequence.
‚Üí Instead of typing commands one by one in the terminal, you can save them in a file and run the whole file at once.


                who | wc -l                                        explain down 

                              . who
                              
                              Shows who is currently logged in to the system.
                              Example output:
                              
                              bhavneet  tty1  Oct 25 09:30
                              kush      pts/0 Oct 25 10:00
                              
                              2. | (Pipe)
                              
                              The pipe operator takes the output of the command on the left (who)
                              and sends it as input to the command on the right (wc -l).
                              
                              3. wc -l
                              
                              Counts the number of lines in the input it receives.


                $ sh won                                           here .........
                              Meaning
                              
                                                sh ‚Üí invokes the Bourne shell (or the system‚Äôs default shell).
                                                won ‚Üí is the name of the file you are asking the shell to run (a script file).
                                                So, this command means:
                              
                              ‚ÄúRun the shell script named won using the shell interpreter.‚Äù

              For example:

                    If you have a file called won that contains:

                              #!/bin/bash
                              echo "Hello, World!"
                  and you run:

                  $ sh won

                  
          Output will be:
                                                  Hello, World!



Step 1: What does ‚Äúexecutable‚Äù mean?

In UNIX/Linux, every file has permissions ‚Äî they tell who can do what with that file:
                r ‚Üí read (you can open and view the file)
                w ‚Üí write (you can edit the file)
                x ‚Üí execute (you can run it like a program)

When you ‚Äúmake a file executable,‚Äù you‚Äôre giving it permission to run ‚Äî telling the computer:
      ‚ÄúHey! You can treat this file like a program!‚Äù
üß© Step 2: Checking a file‚Äôs permissions
          Let‚Äôs say you have a file named won.
      Type:    ls -l won
You might see something like:
      -rw-r--r--  1 bhavneet  users  50 Oct 25 14:12 won

The first part -rw-r--r-- tells you:
                
                r and w for the owner (you can read/write)
                but no x, meaning it‚Äôs not executable yet ‚ùå

‚ö° Step 3: Make it executable

                Now type:      chmod +x won

chmod means change mode (mode = file permissions).      The +x means ‚Äúadd execute permission.‚Äù  here is the key üóù 

Step 4: Run your script
              
              If your file won contains something like this:
              #!/bin/bash
              echo "Hello, world! This is my first shell script."
              
              
              You can now run it like this:
              
                  ./won
                  Output:
                  
                  Hello, world! This is my first shell script.
              
              
              That‚Äôs your shell script running as a real program üöÄ
              
              üß∞ Step 5: Making multiple scripts executable
              
              Let‚Äôs say you have several .sh files:
                                
                                won.sh
                                test.sh
                                setup.sh
              
              Instead of doing chmod +x one by one, you can do:
                          chmod +x *.sh
              That tells the system:
              
              ‚ÄúMake all files that end with .sh executable.‚Äù
              
              üîÅ Step 6: If you want to make everything executable
                       Sometimes you might have many different scripts (not only .sh), then:
              
                        chmod +x *
              This gives all files in the current folder the permission to run.
                  ‚ö†Ô∏è But be careful ‚Äî some files might not need to be executable (like images or text files).
              
              üßô Step 7: Why it‚Äôs important
              
              Making a script executable turns it into something like your own mini-command!
              For example, after doing chmod +x won, you can simply type:
              
                            ./won
              and it feels like you created your own command ‚Äî just like ls, pwd, or cat.
              
              üéØ Summary (the magic in one glance)

        | Command          | Meaning                         | Example         |
        | ---------------- | ------------------------------- | --------------- |
        | `ls -l`          | show file permissions           | `ls -l won`     |
        | `chmod +x file`  | add execute permission          | `chmod +x won`  |
        | `chmod 755 file` | make it executable for everyone | `chmod 755 won` |
        | `chmod +x *.sh`  | make all `.sh` files executable | `chmod +x *.sh` |
        | `./file`         | run the executable file         | `./won`         |
      Reference Table 
    | Symbol | Usage                                            | Example                           | Meaning                               |
    | ------ | ------------------------------------------------ | --------------------------------- | ------------------------------------- |
    | `+`    | arithmetic or add permissions                    | `c=$((a + b))` / `chmod +x won`   | Add numbers or permissions            |
    | `.`    | current directory / source script / hidden files | `cd .` / `. won.sh`               | Run in current shell or refer to here |
    | `=`    | variable assignment or string comparison         | `name="Kush"` / `[ "$a" = "$b" ]` | Assign value or compare strings       |

Shells further table 

| Command   | Bourne Shell (`sh`) | Korn Shell (`ksh`) | Bourne Again Shell (`bash`) | Meaning                                    |
| --------- | ------------------- | ------------------ | --------------------------- | ------------------------------------------ |
| **exit**  | ‚úî built-in          | ‚úî built-in         | ‚úî built-in                  | Exits the shell                            |
| **for**   | ‚úî                   | ‚úî                  | ‚úî                           | Starts a loop                              |
| **if**    | ‚úî                   | ‚úî                  | ‚úî                           | Used for conditional statements            |
| **let**   | ‚ùå (not in Bourne)   | ‚úî                  | ‚úî                           | Performs arithmetic evaluation             |
| **read**  | ‚úî                   | ‚úî                  | ‚úî                           | Reads input from the user                  |
| **test**  | ‚úî                   | ‚úî                  | ‚úî                           | Tests conditions (numbers, strings, files) |
| **until** | ‚úî                   | ‚úî                  | ‚úî                           | Loop until a condition is true             |
| **while** | ‚úî                   | ‚úî                  | ‚úî                           | Loop while a condition is true             |

                      cheack out file won2.sh 
                      summary of won3 
| Line    | Code                                      | What it does                                                                                                 |                                                               |                                                                                   |
| ------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------- | --------------------------------------------------------------------------------- |
| **1‚Äì6** | `# ...`                                   | These are **comments**. They explain what the script does. The shell ignores them.                           |                                                               |                                                                                   |
| **7**   | `echo`                                    | Prints a blank line ‚Äî this is how you ‚Äúskip a line‚Äù visually in output.                                      |                                                               |                                                                                   |
| **8**   | `echo "Date and Time:\c"`                 | Prints the words ‚ÄúDate and Time:‚Äù but **doesn‚Äôt start a new line** (`\c` keeps the cursor on the same line). |                                                               |                                                                                   |
| **9**   | `date`                                    | Prints the current date and time right after the previous message.                                           |                                                               |                                                                                   |
| **10**  | `echo "Number of users on the system:\c"` | Prints a message asking for the number of logged-in users (again without a newline).                         |                                                               |                                                                                   |
| **11**  | `who                                      | wc -l`                                                                                                       | First runs `who` (which lists logged-in users), then pipes (` | `) that output to `wc -l` which counts the lines ‚Äî i.e., the **number of users**. |
| **12**  | `echo "Your current directory:\c"`        | Prints text showing the directory label on the same line.                                                    |                                                               |                                                                                   |
| **13**  | `pwd`                                     | Prints the **current working directory** (where you are).                                                    |                                                               |                                                                                   |
| **14**  | `echo`                                    | Another blank line to make output look neat.                                                                 |                                                               |                                                                                   |

Here‚Äôs what‚Äôs happening in the output:

 Command run:
    $ won3

 Output displayed:
  Date and Time:Wed Nov 30 15:00:52 EDT 2005
  Number of users logged in:14
  Your current directory:/usr/students/david
  $_
