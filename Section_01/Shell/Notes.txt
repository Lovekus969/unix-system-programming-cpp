
Cheack all shell commands on this website copy and paste the link to see.
https://explainshell.com/explain?cmd=ls#

                                                    Chapter Overview: Shell as a High-Level Language


This chapter focuses on the capabilities of the UNIX shell, showing that it is not just a command interpreter but also a powerful high-level programming language.
  It covers the following key topics:

Variables – How to create, assign, and use variables in shell scripts to store data (like numbers, strings, filenames, etc.).

Flow Control –How to control the flow of execution in shell scripts using constructs such as:

  if, else, elif (conditional branching)
  for, while, until loops

case statements (for multi-branch selection)
    Creation of Shell Scripts – How to write and save a shell program (usually with a .sh extension) and make it executable.
    Running Shell Scripts – How to execute shell programs from the command line using commands like:

      sh scriptname.sh
      ./scriptname.sh

Debugging –
How to identify and fix errors in shell programs using options like:
    
    sh -x scriptname.sh (to trace execution)
    echo statements (to print variable values and track flow)


Shell as a Command Language

The UNIX shell is a command language that is interpreted, not compiled.
→ This means commands are executed line by line by the shell, rather than being converted into machine code before running.

    Shell Program Files are called:

                                  Shell procedures
                                  Shell scripts
                                  Or simply scripts

A shell script is a file containing a series of shell commands that the shell executes in sequence.
→ Instead of typing commands one by one in the terminal, you can save them in a file and run the whole file at once.


                who | wc -l                                        explain down 

                              . who
                              
                              Shows who is currently logged in to the system.
                              Example output:
                              
                              bhavneet  tty1  Oct 25 09:30
                              kush      pts/0 Oct 25 10:00
                              
                              2. | (Pipe)
                              
                              The pipe operator takes the output of the command on the left (who)
                              and sends it as input to the command on the right (wc -l).
                              
                              3. wc -l
                              
                              Counts the number of lines in the input it receives.


                $ sh won                                           here .........
                              Meaning
                              
                                                sh → invokes the Bourne shell (or the system’s default shell).
                                                won → is the name of the file you are asking the shell to run (a script file).
                                                So, this command means:
                              
                              “Run the shell script named won using the shell interpreter.”

              For example:

                    If you have a file called won that contains:

                              #!/bin/bash
                              echo "Hello, World!"
                  and you run:

                  $ sh won

                  
          Output will be:
                                                  Hello, World!
